{"version":3,"sources":["components/SearchBar.js","components/WeatherInfo.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","onSubmit","submit","type","value","onChange","change","placeholder","WeatherInfo","weather","city","date","temp","temp_min","temp_max","sunrise","sunset","pressure","humidity","windspeed","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","APIkey","App","state","coordination","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","prevState","main","sys","wind","speed","catch","console","log","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.30f1e389.chunk.js","sourcesContent":["import React from 'react';\nimport './searchbar.css';\n\nconst SearchBar = props => {\n    return (\n    <form onSubmit={props.submit}>\n        <input\n            type=\"text\"\n            value={props.value}\n            onChange={props.change}\n            placeholder=\"Wpisz miasto\" />\n        <button>Wyszukaj miasto</button>\n    </form>\n    )\n}\n\nexport default SearchBar;","import React from 'react';\nimport './weatherinfo.css';\n\nconst WeatherInfo = props => {\n    const {\n        city,\n        date,\n        temp,\n        temp_min,\n        temp_max,\n        sunrise,\n        sunset,\n        pressure,\n        humidity,\n        windspeed,\n        err,\n    } = props.weather\n\n    let content = null;\n\n    if(!err && city) {\n\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString()\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString()\n        content = (\n            <>\n                <h3> {city} </h3>\n                <h4> Czas: {date} </h4>\n                <hr></hr>\n                <h2> {temp}&#176;C</h2>\n                <h3> {pressure} hPa</h3>\n                \n                <hr></hr>\n                <h4> Wilgotność: {humidity}%</h4>\n                <h4> Prędkość wiatru: {windspeed} m/s</h4>\n                <h4>Temperatura minimalna: {temp_min}&#176;C</h4>\n                <h4>Temperatura maksymalna: {temp_max}&#176;C</h4>\n                <h4>Wschód Słońca: {sunriseTime}</h4>\n                <h4>Zachód Słońca: {sunsetTime}</h4>\n                \n                \n            </>\n        )\n    }\n    return (\n        <div className=\"weatherInfo\">\n            {err ? `Nie ma w bazie wyszukiwanego miasta: ${city}` : content}\n        </div>\n    )\n}\n\nexport default WeatherInfo;","import React, {Component} from 'react';\nimport './App.css';\nimport SearchBar from './SearchBar';\nimport WeatherInfo from './WeatherInfo';\nconst APIkey = 'a67f1322578aaa1a1bbea6ca22e0f941'\n\nclass App extends Component {\n  state = { \n    value: '',\n    date: '',\n    city: '',\n    coordination: '',\n    temp: '',\n    temp_min: '',\n    temp_max: '',\n    sunrise: '',\n    sunset: '',\n    pressure: '',\n    humidity: '',\n    windspeed: '',\n    err: '',\n   }\n  \n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  \n\n  handleCitySubmit = (e) => {\n      e.preventDefault()\n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIkey}&units=metric&lang=pl`;\n\n      fetch(API)\n      .then(response => {\n        if(response.ok) {\n          return response\n        }\n        throw Error(\"Nie udało się pobrać danych!\")\n      })\n\n      .then(response => response.json())\n      .then(data => {\n        const time = new Date().toLocaleString()\n        this.setState(prevState => ({\n          err: false,\n          date: time,\n          city: prevState.value,\n          temp: data.main.temp,\n          temp_min: data.main.temp_min,\n          temp_max: data.main.temp_max,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          pressure: data.main.pressure,\n          humidity: data.main.humidity,\n          windspeed: data.wind.speed,\n        }))\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState(prevState => ({\n          err: true,\n          city: prevState.value\n        }))\n      })\n  }\n\n  render() { \n    return (\n      <div className=\"app\">\n        <header className=\"header\" id=\"header\">\n          <h1>POGODA</h1>\n        </header>\n        <WeatherInfo weather={this.state} />\n        <SearchBar\n          value={this.state.value}\n          change={this.handleInputChange}\n          submit={this.handleCitySubmit}\n        />\n        \n        \n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}