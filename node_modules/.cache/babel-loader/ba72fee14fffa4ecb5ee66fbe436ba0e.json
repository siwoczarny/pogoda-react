{"ast":null,"code":"var _jsxFileName = \"/Users/maciejchrustowski/ReactApps/weatherapp/src/components/WeatherInfo.js\";\nimport React from 'react';\nimport './weatherinfo.css';\n\nconst WeatherInfo = props => {\n  const _props$weather = props.weather,\n        city = _props$weather.city,\n        date = _props$weather.date,\n        temp = _props$weather.temp,\n        temp_min = _props$weather.temp_min,\n        temp_max = _props$weather.temp_max,\n        sunrise = _props$weather.sunrise,\n        sunset = _props$weather.sunset,\n        pressure = _props$weather.pressure,\n        humidity = _props$weather.humidity,\n        windspeed = _props$weather.windspeed,\n        err = _props$weather.err;\n  let content = null;\n\n  if (!err && city) {\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\n    content = React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \" \", temp, \"\\xB0C\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \" \", pressure, \" hPa\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \" Wilgotno\\u015B\\u0107: \", humidity, \"%\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \" Pr\\u0119dko\\u015B\\u0107 wiatru: \", windspeed, \" m/s\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Temperatura minimalna: \", temp_min, \"\\xB0C\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Temperatura maksymalna: \", temp_max, \"\\xB0C\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Wsch\\xF3d S\\u0142o\\u0144ca: \", sunriseTime), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Zach\\xF3d S\\u0142o\\u0144ca: \", sunsetTime), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \" Znaleziono: \", city, \" \"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \" Czas: \", date, \" \"));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"weatherInfo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, err ? `Nie ma w bazie wyszukiwanego miasta: ${city}` : content);\n};\n\nexport default WeatherInfo;","map":{"version":3,"sources":["/Users/maciejchrustowski/ReactApps/weatherapp/src/components/WeatherInfo.js"],"names":["React","WeatherInfo","props","weather","city","date","temp","temp_min","temp_max","sunrise","sunset","pressure","humidity","windspeed","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,mBAAP;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAAA,yBAarBA,KAAK,CAACC,OAbe;AAAA,QAErBC,IAFqB,kBAErBA,IAFqB;AAAA,QAGrBC,IAHqB,kBAGrBA,IAHqB;AAAA,QAIrBC,IAJqB,kBAIrBA,IAJqB;AAAA,QAKrBC,QALqB,kBAKrBA,QALqB;AAAA,QAMrBC,QANqB,kBAMrBA,QANqB;AAAA,QAOrBC,OAPqB,kBAOrBA,OAPqB;AAAA,QAQrBC,MARqB,kBAQrBA,MARqB;AAAA,QASrBC,QATqB,kBASrBA,QATqB;AAAA,QAUrBC,QAVqB,kBAUrBA,QAVqB;AAAA,QAWrBC,SAXqB,kBAWrBA,SAXqB;AAAA,QAYrBC,GAZqB,kBAYrBA,GAZqB;AAezB,MAAIC,OAAO,GAAG,IAAd;;AAEA,MAAG,CAACD,GAAD,IAAQV,IAAX,EAAiB;AAEb,UAAMY,WAAW,GAAG,IAAIC,IAAJ,CAASR,OAAO,GAAG,IAAnB,EAAyBS,kBAAzB,EAApB;AACA,UAAMC,UAAU,GAAG,IAAIF,IAAJ,CAASP,MAAM,GAAG,IAAlB,EAAwBQ,kBAAxB,EAAnB;AACAH,IAAAA,OAAO,GACH,0CAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAMT,IAAN,UAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAMK,QAAN,SAHJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAkBC,QAAlB,MANJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAAuBC,SAAvB,SAPJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAA4BN,QAA5B,UARJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAA6BC,QAA7B,UATJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAoBQ,WAApB,CAVJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAoBG,UAApB,CAXJ,EAYI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZJ,EAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkBf,IAAlB,MAbJ,EAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAYC,IAAZ,MAdJ,CADJ;AAoBH;;AACD,SACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKS,GAAG,GAAI,wCAAuCV,IAAK,EAAhD,GAAoDW,OAD5D,CADJ;AAKH,CA/CD;;AAiDA,eAAed,WAAf","sourcesContent":["import React from 'react';\nimport './weatherinfo.css';\n\nconst WeatherInfo = props => {\n    const {\n        city,\n        date,\n        temp,\n        temp_min,\n        temp_max,\n        sunrise,\n        sunset,\n        pressure,\n        humidity,\n        windspeed,\n        err,\n    } = props.weather\n\n    let content = null;\n\n    if(!err && city) {\n\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString()\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString()\n        content = (\n            <>\n                \n                <h2> {temp}&#176;C</h2>\n                <h3> {pressure} hPa</h3>\n                \n                <hr></hr>\n                <h4> Wilgotność: {humidity}%</h4>\n                <h4> Prędkość wiatru: {windspeed} m/s</h4>\n                <h4>Temperatura minimalna: {temp_min}&#176;C</h4>\n                <h4>Temperatura maksymalna: {temp_max}&#176;C</h4>\n                <h4>Wschód Słońca: {sunriseTime}</h4>\n                <h4>Zachód Słońca: {sunsetTime}</h4>\n                <hr></hr>\n                <h3> Znaleziono: {city} </h3>\n                <h4> Czas: {date} </h4>\n                \n                \n            </>\n        )\n    }\n    return (\n        <div className=\"weatherInfo\">\n            {err ? `Nie ma w bazie wyszukiwanego miasta: ${city}` : content}\n        </div>\n    )\n}\n\nexport default WeatherInfo;"]},"metadata":{},"sourceType":"module"}