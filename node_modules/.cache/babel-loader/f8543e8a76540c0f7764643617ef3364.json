{"ast":null,"code":"var _jsxFileName = \"/Users/maciejchrustowski/ReactApps/weatherapp/src/components/WeatherInfo.js\";\nimport React from 'react';\nimport './weatherinfo.css';\nimport pressureIcon from './icon/pressure.png';\nimport humidityIcon from './icon/humidity.png';\nimport windIcon from './icon/wind.png';\n\nconst WeatherInfo = props => {\n  const _props$weather = props.weather,\n        city = _props$weather.city,\n        date = _props$weather.date,\n        temp = _props$weather.temp,\n        temp_min = _props$weather.temp_min,\n        temp_max = _props$weather.temp_max,\n        pressure = _props$weather.pressure,\n        humidity = _props$weather.humidity,\n        windspeed = _props$weather.windspeed,\n        err = _props$weather.err;\n  let content = null;\n\n  if (!err && city) {\n    content = React.createElement(React.Fragment, null, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Wyniki wyszukiwania dla: \", city), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Wyszukiwanie dla daty: \", date), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Temperatura: \", temp, \"\\xAFC\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, temp_min, \"\\xAFC\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, temp_max, \"\\xAFC\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \" \", React.createElement(\"img\", {\n      src: pressureIcon,\n      alt: \"pressure icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), \" \", pressure), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \" \", React.createElement(\"img\", {\n      src: humidityIcon,\n      alt: \"humidity icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), \" \", humidity), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \" \", React.createElement(\"img\", {\n      src: windIcon,\n      alt: \"wind icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), \" \", windspeed));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"weatherInfo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, err ? `Nie ma w bazie wyszukiwanego miasta: ${city}` : content);\n};\n\nexport default WeatherInfo;","map":{"version":3,"sources":["/Users/maciejchrustowski/ReactApps/weatherapp/src/components/WeatherInfo.js"],"names":["React","pressureIcon","humidityIcon","windIcon","WeatherInfo","props","weather","city","date","temp","temp_min","temp_max","pressure","humidity","windspeed","err","content"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,mBAAP;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAAA,yBAWrBA,KAAK,CAACC,OAXe;AAAA,QAErBC,IAFqB,kBAErBA,IAFqB;AAAA,QAGrBC,IAHqB,kBAGrBA,IAHqB;AAAA,QAIrBC,IAJqB,kBAIrBA,IAJqB;AAAA,QAKrBC,QALqB,kBAKrBA,QALqB;AAAA,QAMrBC,QANqB,kBAMrBA,QANqB;AAAA,QAOrBC,QAPqB,kBAOrBA,QAPqB;AAAA,QAQrBC,QARqB,kBAQrBA,QARqB;AAAA,QASrBC,SATqB,kBASrBA,SATqB;AAAA,QAUrBC,GAVqB,kBAUrBA,GAVqB;AAazB,MAAIC,OAAO,GAAG,IAAd;;AAEA,MAAG,CAACD,GAAD,IAAQR,IAAX,EAAiB;AAEbS,IAAAA,OAAO,GACH,0CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA8BT,IAA9B,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAA4BC,IAA5B,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkBC,IAAlB,UAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,QAAL,UAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,QAAL,UALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAK;AAAK,MAAA,GAAG,EAAEV,YAAV;AAAwB,MAAA,GAAG,EAAC,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,OAAoDW,QAApD,CANJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAK;AAAK,MAAA,GAAG,EAAEV,YAAV;AAAwB,MAAA,GAAG,EAAC,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,OAAoDW,QAApD,CAPJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAK;AAAK,MAAA,GAAG,EAAEV,QAAV;AAAoB,MAAA,GAAG,EAAC,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,OAA4CW,SAA5C,CARJ,CADJ;AAYH;;AACD,SACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,GAAG,GAAI,wCAAuCR,IAAK,EAAhD,GAAoDS,OAD5D,CADJ;AAKH,CAnCD;;AAqCA,eAAeZ,WAAf","sourcesContent":["import React from 'react';\nimport './weatherinfo.css';\nimport pressureIcon from './icon/pressure.png';\nimport humidityIcon from './icon/humidity.png';\nimport windIcon from './icon/wind.png';\n\nconst WeatherInfo = props => {\n    const {\n        city,\n        date,\n        temp,\n        temp_min,\n        temp_max,\n        pressure,\n        humidity,\n        windspeed,\n        err,\n    } = props.weather\n\n    let content = null;\n\n    if(!err && city) {\n\n        content = (\n            <>\n                <h4>Wyniki wyszukiwania dla: {city}</h4>\n                <h4>Wyszukiwanie dla daty: {date}</h4>\n                <h4>Temperatura: {temp}&#175;C</h4>\n                <h4>{temp_min}&#175;C</h4>\n                <h4>{temp_max}&#175;C</h4>\n                <h4> <img src={pressureIcon} alt=\"pressure icon\"/> {pressure}</h4>\n                <h4> <img src={humidityIcon} alt=\"humidity icon\"/> {humidity}</h4>\n                <h4> <img src={windIcon} alt=\"wind icon\"/> {windspeed}</h4>\n            </>\n        )\n    }\n    return (\n        <div className=\"weatherInfo\">\n            {err ? `Nie ma w bazie wyszukiwanego miasta: ${city}` : content}\n        </div>\n    )\n}\n\nexport default WeatherInfo;"]},"metadata":{},"sourceType":"module"}