{"ast":null,"code":"import _classCallCheck from\"/Users/maciejchrustowski/Repositories/pogodareact/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/maciejchrustowski/Repositories/pogodareact/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/maciejchrustowski/Repositories/pogodareact/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/maciejchrustowski/Repositories/pogodareact/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/maciejchrustowski/Repositories/pogodareact/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import'./App.css';import SearchBar from'./SearchBar';import WeatherInfo from'./WeatherInfo';var APIkey='a67f1322578aaa1a1bbea6ca22e0f941';var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(){var _getPrototypeOf2;var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(App)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={value:'',date:'',city:'',coordination:'',temp:'',temp_min:'',temp_max:'',sunrise:'',sunset:'',pressure:'',humidity:'',windspeed:'',err:''};_this.handleInputChange=function(e){_this.setState({value:e.target.value});};_this.handleCitySubmit=function(e){e.preventDefault();var API=\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(_this.state.value,\"&APPID=\").concat(APIkey,\"&units=metric&lang=pl\");fetch(API).then(function(response){if(response.ok){return response;}throw Error(\"Nie udało się pobrać danych!\");}).then(function(response){return response.json();}).then(function(data){var time=new Date().toLocaleString();_this.setState(function(prevState){return{err:false,date:time,city:prevState.value,temp:data.main.temp,temp_min:data.main.temp_min,temp_max:data.main.temp_max,sunrise:data.sys.sunrise,sunset:data.sys.sunset,pressure:data.main.pressure,humidity:data.main.humidity,windspeed:data.wind.speed};});}).catch(function(err){console.log(err);_this.setState(function(prevState){return{err:true,city:prevState.value};});});};return _this;}_createClass(App,[{key:\"render\",value:function render(){return React.createElement(\"div\",{className:\"app\"},React.createElement(\"header\",{className:\"header\",id:\"header\"},React.createElement(\"h1\",null,\"POGODA\")),React.createElement(WeatherInfo,{weather:this.state}),React.createElement(SearchBar,{value:this.state.value,change:this.handleInputChange,submit:this.handleCitySubmit}));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/maciejchrustowski/Repositories/pogodareact/src/components/App.js"],"names":["React","Component","SearchBar","WeatherInfo","APIkey","App","state","value","date","city","coordination","temp","temp_min","temp_max","sunrise","sunset","pressure","humidity","windspeed","err","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","Date","toLocaleString","prevState","main","sys","wind","speed","catch","console","log"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport SearchBar from './SearchBar';\nimport WeatherInfo from './WeatherInfo';\nconst APIkey = 'a67f1322578aaa1a1bbea6ca22e0f941'\n\nclass App extends Component {\n  state = { \n    value: '',\n    date: '',\n    city: '',\n    coordination: '',\n    temp: '',\n    temp_min: '',\n    temp_max: '',\n    sunrise: '',\n    sunset: '',\n    pressure: '',\n    humidity: '',\n    windspeed: '',\n    err: '',\n   }\n  \n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  \n\n  handleCitySubmit = (e) => {\n      e.preventDefault()\n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIkey}&units=metric&lang=pl`;\n\n      fetch(API)\n      .then(response => {\n        if(response.ok) {\n          return response\n        }\n        throw Error(\"Nie udało się pobrać danych!\")\n      })\n\n      .then(response => response.json())\n      .then(data => {\n        const time = new Date().toLocaleString()\n        this.setState(prevState => ({\n          err: false,\n          date: time,\n          city: prevState.value,\n          temp: data.main.temp,\n          temp_min: data.main.temp_min,\n          temp_max: data.main.temp_max,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          pressure: data.main.pressure,\n          humidity: data.main.humidity,\n          windspeed: data.wind.speed,\n        }))\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState(prevState => ({\n          err: true,\n          city: prevState.value\n        }))\n      })\n  }\n\n  render() { \n    return (\n      <div className=\"app\">\n        <header className=\"header\" id=\"header\">\n          <h1>POGODA</h1>\n        </header>\n        <WeatherInfo weather={this.state} />\n        <SearchBar\n          value={this.state.value}\n          change={this.handleInputChange}\n          submit={this.handleCitySubmit}\n        />\n        \n        \n      </div>\n    );\n  }\n}\n \nexport default App;"]},"metadata":{},"sourceType":"module"}